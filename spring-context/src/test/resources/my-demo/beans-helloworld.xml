<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

    <context:annotation-config></context:annotation-config>
	<!--配置一个 bean
	1.通过属性注入: 通过 setter 方法注入属性值
	2.通过构造器注入属性值(要求: 在 Bean 中必须有对应的构造器)
	-->
	<bean id="helloWorld" class="my_demo.helloworld.HelloWorld">
		<property name="user" value="Tom"></property>
	</bean>
    <!--<alias name="helloWorld" alias="test1,test2"/>-->

	<bean id="helloWorld2" class="my_demo.helloworld.HelloWorld">
		<constructor-arg value="Mike"></constructor-arg>
	</bean>

	<!-- 若一个 bean 有多个构造器, 如何通过构造器来为 bean 的属性赋值 -->
	<!-- 可以根据 index 和 value 进行更加精确的定位. (了解) -->
	<bean id="car" class="my_demo.helloworld.Car">
		<constructor-arg value="KUGA" index="1"></constructor-arg>
		<constructor-arg value="ChangAnFord" index="0"></constructor-arg>
		<constructor-arg value="250000" type="float"></constructor-arg>
	</bean>

    <!-- 若字面值中包含特殊字符, 则可以使用 DCDATA 来进行赋值. (了解) -->
	<bean id="car2" class="my_demo.helloworld.Car">
		<constructor-arg value="ChangAnMazda"></constructor-arg>
		<constructor-arg>
			<value><![CDATA[<ATARZA>]]></value>
		</constructor-arg>
		<constructor-arg value="180" type="int"></constructor-arg>
	</bean>

	<!--bean的引用 -->
	<bean id="dao" class="my_demo.helloworld.ref.Dao"></bean>

	<bean id="service" class="my_demo.helloworld.ref.Service">
		<property name="dao" ref="dao"></property>
	</bean>

	<!-- 声明使用内部 bean
	     内部 bean, 类似于匿名内部类对象. 不能被外部的 bean 来引用, 也没有必要设置 id 属性
	-->
	<bean id="service2" class="my_demo.helloworld.ref.Service">
		<property name="dao">
			<bean class="my_demo.helloworld.ref.Dao">
				<property name="dataSource" value="c3p0"></property>
			</bean>
		</property>
	</bean>


	<!-- 设置级联属性(了解),这样这里设置的dataSource为'DBCP2'会覆盖上面设置的'c3p0' -->
	<bean id="action" class="my_demo.helloworld.ref.Action">
		<property name="service" ref="service2"></property>
		<property name="service.dao.dataSource" value="DBCP2"></property>
	</bean>


	<!-- 为 Dao 的 dataSource 属性赋值为 null, 适用于若某一个 bean 的属性值不是 null, 使用时需要为其设置为 null(了解) -->
	<bean id="dao2" class="my_demo.helloworld.ref.Dao">
		<property name="dataSource"><null/></property>
	</bean>


	<!-- 装配集合属性 -->
	<bean id="user" class="my_demo.helloworld.User">
		<property name="userName" value="Jack"></property>
		<property name="cars">
			<list>
				<ref bean="car"/>
				<ref bean="car2"/>
			</list>
		</property>
	</bean>



	<!-- 装配map属性 -->
	<bean id="userMap" class="my_demo.helloworld.User2">
		<property name="userName" value="Jack"></property>
		<property name="cars">
			<map>
				<entry key="aa" value-ref="car" />
				<entry key="bb" value-ref="car2" />
			</map>
		</property>
	</bean>

	<!--以下面方式装配集合属性-->
	<bean id="injectTest" class="my_demo.helloworld.ListInjectTest" >
		<property name="list[0]" value="gao"></property>
		<property name="list[1]" value="gao1"></property>

		<property name="map[key1]" value="value1"></property>
		<property name="map[key2]" value="value2"></property>
	</bean>



	<!-- 装配properties属性 -->
	<bean id="dataSource" class="my_demo.helloworld.DataSource">
		<property name="properties">
			<props>
				<prop key="user">root</prop>
				<prop key="password">root</prop>
			</props>
		</property>
	</bean>



    <!--引用外部声明的list-->
    <!-- 配置单例的集合bean,以供多个bean进行引用,需要导入util命名空间 -->
    <util:list id="cars">
        <ref bean="car"/>
        <ref bean="car2"/>
    </util:list>

    <bean id="user2" class="my_demo.helloworld.User">
        <property name="userName" value="Rose"></property>
        <!--引用外部声明的 list-->
        <property name="cars" ref="cars"></property>
    </bean>



    <!-- 使用p命名空间为bean的属性赋值,需要先导入p命名空间,相对于传统的方式更加简洁 -->
    <bean id="user3" class="my_demo.helloworld.User"
          p:cars-ref="cars" p:userName="Titannic"></bean>


    <!-- bean 使用 parent 来完成继承
	若只想把父 Bean 作为模板, 可以设置 <bean> 的abstract 属性为 true, 这样 Spring 将不会实例化这个 Bean
	若某一个bean的class属性没有指定,则该bean必须是一个抽象bean
	-->
    <bean id="user4" parent="user" p:userName="Bob"></bean>
    <bean id="user5" parent="user" p:userName="维多利亚"></bean>

    <!-- 依赖 depents-on -->
    <bean id="user6" parent="user" p:userName="Backham" depends-on="user5"></bean>


</beans>
